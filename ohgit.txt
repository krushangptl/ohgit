Main/* 
    Hello This is Krushang! 
    Lets learn Git!

    What is Version Control?
    Ans. Tracking, Managing and making changes to Software is known as Version Control.

    Example: Suppose I am working on a project saved in the directory `proj`.
    By now, I had made some changes and saved them as : 
    - `proj-update1`
    - `proj-update2`
    - `proj-update3`
    - `proj-update4`
    Now, my friend wants to help me to add some great feature on my project.
    So I send the latest directory `proj-update4`
    And after adding feature, I receive `proj-update4-feat1` from my friend.
    I accidentally broke  the new code base, so I need to find where I broke the code.
    But I am not able to find out where I made a mistake.

    And Here comes the Version Control System. That help me when ever I need to go previous version of project 
    or working on a new version of project.
*/

Installation/*
    As I use Ubuntu Linux,
        `$sudo apt install git` 
    For other OS, Please Checkout Official Documentation.
*/

Version/*
    After Installation, Checkout Version of git, 
        `$git --version` 
*/

Config/*
    Global Configuration for git.  

    For Global User Name, 
        `$git config --global user.name "your_name"`
    
    For Global User EMail,
        `$git config --global user.email "your_email@example.com"`

    Basic Configuration is done :)
*/

Repo/*
    Repository, 

    AKA Directory (In Linux Environment) and Folder (In Windows Environment)

    For Initialize your directory into git repository, you can use: 
        `$git init` 

    Here is the deal, the default git branch of your repository is "master" and 
    you can change it in any other name like: main(standard branch), develop, feat, etc ...
    
    To change it globally, so when you Initialize git repository your default branch set as it.
        `$git config --global init.defaultBranch <name>` 
    To change it only in current repository 
        `$git branch -M <name>`

    After you Initialize directory as repository in your file system .git directory is added 
    which is hidden.

    What is Branch : Parallel version of your project.
*/

Write-Add-Commit/*
    
    # write and changes
    $mkdir ohgit # create directory
    $cd ohgit 
    $git init   # Initialize git repository 
    $mkdir test # create test directory
    $cd test 
    $vim classic.go # create an go project file and write some code
        
    # git status 
    $git status # tells you what you done and whats remaining

    In git there is 2 type of work you do before commit anything. 
    Stage and Unstage
    For commit anything you need to require that work in Stage state.
    By default what ever you do is in Unstage state. 
    For making your work to Stage state we use "add" 
    
    $git add classic.go  # one by one || $git add . # add everything 
    $git status # to check our work is now on Stage state 

    Commit: Your changes save into project with specific ID, time and date with who did changes.

    $git commit -m "Adding Classic.go" 

    Where '-m' is message flag used to add commit message.

    History 
    $git log # provide you all commits with unique ID and authors info 
     
    It is useful to go previous version of your project with unique ID of commit  
    for example to go previous version of your project
    
    $git checkout <commitID> 
*/

GitHub/*
    Git is tool to track development/code-base. 
    GitHub is Cloud Service to store Repository and Collaborate with other online(OSS).

    There is 2 Type of Repository 
    Local Repository in your device and Remote Repository on GitHub. 

    Now Create New Repository `ohgit` and copy the http/ssh repository link.
*/

Push/*
    Now We are going to push our local repository to remote 

    $git remote add origin <http/ssh link>
    # remember origin, you can also use other names 
    $git push -u origin <branch name> 
    # -u flag is upstream flag, your branch name -> in this case its "master" 
    
    Great! Now you push you repository online
*/

Pull/*
    If someone make changes and it added to master branch or then you need to pull that 
    changes, 
    $git pull # (on that specific branch -> master)
*/

Event1/*
    Configuration! You learn basic git! 
    - create repository
    - push changes
    - i think it good for today!
*/

True-Power-of-git/*
    HEAD reference or indicator that let you help to know in which branch you are.
    As you are in "master" branch up to now, HEAD is at "master" branch.

    Branching?
    : Creating Parallel version of your project and Means 2 Branches are in parallel 
    your "master" branch and branch that you create.
    So You can make changes in new created branch while the "master"branch remain same.
    
    Merging? 
    : After adding features or making changes in new branch you can merge it to "master" branch.
    Which now new continue version of you project.

    Branching Let you help to maintain code-base and making changes parallel without effecting 
    "master" aka your main branch. 

    Example of Branches : master, main, develop, feat, etc.... 
    
    ver1               ver2                 ver3
    ---x------------------x--------------------x--------------
       |                |                   |
    ---x-----x-----x-----------------x------------------------
             |       |
    ---------x------------------------------------------------
*/
